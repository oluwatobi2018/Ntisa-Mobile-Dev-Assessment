<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>${EXECUTABLE_NAME}</string>
  <key>CFBundleIdentifier</key>
  <string>${PRODUCT_BUNDLE_IDENTIFIER}</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>${PRODUCT_NAME}</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>${CURRENT_PROJECT_VERSION}</string>
  <key>NSPrincipalClass</key>
  <string></string>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreferenceSpecifiers</key>
	<array>
		<dict>
			<key>FooterText</key>
			<string>This application makes use of the following third party libraries:</string>
			<key>Title</key>
			<string>Acknowledgements</string>
			<key>Type</key>
			<string>PSGroupSpecifier</string>
		</dict>
		<dict>
			<key>FooterText</key>
			<string>
1. Apache License version 2.0
2. Realm Components
3. Export Compliance

</string>
			<key>License</key>
			<string>Apache 2.0</string>
			<key>Title</key>
			<string>Realm</string>
			<key>Type</key>
			<string>PSGroupSpecifier</string>
		</dict>
		<dict>
			<key>FooterText</key>
            </string>
			<key>License</key>
			<string>Apache 2.0</string>
			<key>Title</key>
			<string>RealmSwift</string>
			<key>Type</key>
			<string>PSGroupSpecifier</string>
		</dict>
		<dict>
			<key>FooterText</key>
			<string>Generated by CocoaPods - https://cocoapods.org</string>
			<key>Title</key>
			<string></string>
			<key>Type</key>
			<string>PSGroupSpecifier</string>
		</dict>
	</array>
	<key>StringsTable</key>
	<string>Acknowledgements</string>
	<key>Title</key>
	<string>Acknowledgements</string>
</dict>
</plist>
#!/bin/sh
set -e
set -u
set -o pipefail

function on_error {
  echo "$(realpath -mq "${0}"):$1: error: Unexpected failure"
}
trap 'on_error $LINENO' ERR

if [ -z ${FRAMEWORKS_FOLDER_PATH+x} ]; then
  # If FRAMEWORKS_FOLDER_PATH is not set, then there's nowhere for us to copy
  # frameworks to, so exit 0 (signalling the script phase was successful).
  exit 0
fi

echo "mkdir -p ${CONFIGURATION_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"
mkdir -p "${CONFIGURATION_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"

COCOAPODS_PARALLEL_CODE_SIGN="${COCOAPODS_PARALLEL_CODE_SIGN:-false}"
SWIFT_STDLIB_PATH="${DT_TOOLCHAIN_DIR}/usr/lib/swift/${PLATFORM_NAME}"

# Used as a return value for each invocation of `strip_invalid_archs` function.
STRIP_BINARY_RETVAL=0

# This protects against multiple targets copying the same framework dependency at the same time. The solution
# was originally proposed here: https://lists.samba.org/archive/rsync/2008-February/020158.html
RSYNC_PROTECT_TMP_FILES=(--filter "P .*.??????")

# Copies and strips a vendored framework
install_framework()
{
  if [ -r "${BUILT_PRODUCTS_DIR}/$1" ]; then
    local source="${BUILT_PRODUCTS_DIR}/$1"
  elif [ -r "${BUILT_PRODUCTS_DIR}/$(basename "$1")" ]; then
    local source="${BUILT_PRODUCTS_DIR}/$(basename "$1")"
  elif [ -r "$1" ]; then
    local source="$1"
  fi

  local destination="${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"

  if [ -L "${source}" ]; then
    echo "Symlinked..."
    source="$(readlink "${source}")"
  fi

  # Use filter instead of exclude so missing patterns don't throw errors.
  echo "rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${source}\" \"${destination}\""
  rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter "- CVS/" --filter "- .svn/" --filter "- .git/" --filter "- .hg/" --filter "- Headers" --filter "- PrivateHeaders" --filter "- Modules" "${source}" "${destination}"

  local basename
  basename="$(basename -s .framework "$1")"
  binary="${destination}/${basename}.framework/${basename}"

  if ! [ -r "$binary" ]; then
    binary="${destination}/${basename}"
  elif [ -L "${binary}" ]; then
    echo "Destination binary is symlinked..."
    dirname="$(dirname "${binary}")"
    binary="${dirname}/$(readlink "${binary}")"
  fi

  # Strip invalid architectures so "fat" simulator / device frameworks work on device
  if [[ "$(file "$binary")" == *"dynamically linked shared library"* ]]; then
    strip_invalid_archs "$binary"
  fi

  # Resign the code if required by the build settings to avoid unstable apps
  code_sign_if_enabled "${destination}/$(basename "$1")"

  # Embed linked Swift runtime libraries. No longer necessary as of Xcode 7.
  if [ "${XCODE_VERSION_MAJOR}" -lt 7 ]; then
    local swift_runtime_libs
    swift_runtime_libs=$(xcrun otool -LX "$binary" | grep --color=never @rpath/libswift | sed -E s/@rpath\\/\(.+dylib\).*/\\1/g | uniq -u)
    for lib in $swift_runtime_libs; do
      echo "rsync -auv \"${SWIFT_STDLIB_PATH}/${lib}\" \"${destination}\""
      rsync -auv "${SWIFT_STDLIB_PATH}/${lib}" "${destination}"
      code_sign_if_enabled "${destination}/${lib}"
    done
  fi
}

# Copies and strips a vendored dSYM
install_dsym() {
  local source="$1"
  if [ -r "$source" ]; then
    # Copy the dSYM into a the targets temp dir.
    echo "rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${source}\" \"${DERIVED_FILES_DIR}\""
    rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter "- CVS/" --filter "- .svn/" --filter "- .git/" --filter "- .hg/" --filter "- Headers" --filter "- PrivateHeaders" --filter "- Modules" "${source}" "${DERIVED_FILES_DIR}"

    local basename
    basename="$(basename -s .framework.dSYM "$source")"
    binary="${DERIVED_FILES_DIR}/${basename}.framework.dSYM/Contents/Resources/DWARF/${basename}"

    # Strip invalid architectures so "fat" simulator / device frameworks work on device
    if [[ "$(file "$binary")" == *"Mach-O dSYM companion"* ]]; then
      strip_invalid_archs "$binary"
    fi

    if [[ $STRIP_BINARY_RETVAL == 1 ]]; then
      # Move the stripped file into its final destination.
      echo "rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter \"- CVS/\" --filter \"- .svn/\" --filter \"- .git/\" --filter \"- .hg/\" --filter \"- Headers\" --filter \"- PrivateHeaders\" --filter \"- Modules\" \"${DERIVED_FILES_DIR}/${basename}.framework.dSYM\" \"${DWARF_DSYM_FOLDER_PATH}\""
      rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" --filter "- CVS/" --filter "- .svn/" --filter "- .git/" --filter "- .hg/" --filter "- Headers" --filter "- PrivateHeaders" --filter "- Modules" "${DERIVED_FILES_DIR}/${basename}.framework.dSYM" "${DWARF_DSYM_FOLDER_PATH}"
    else
      # The dSYM was not stripped at all, in this case touch a fake folder so the input/output paths from Xcode do not reexecute this script because the file is missing.
      touch "${DWARF_DSYM_FOLDER_PATH}/${basename}.framework.dSYM"
    fi
  fi
}

# Signs a framework with the provided identity
code_sign_if_enabled() {
  if [ -n "${EXPANDED_CODE_SIGN_IDENTITY:-}" -a "${CODE_SIGNING_REQUIRED:-}" != "NO" -a "${CODE_SIGNING_ALLOWED}" != "NO" ]; then
    # Use the current code_sign_identity
    echo "Code Signing $1 with Identity ${EXPANDED_CODE_SIGN_IDENTITY_NAME}"
    local code_sign_cmd="/usr/bin/codesign --force --sign ${EXPANDED_CODE_SIGN_IDENTITY} ${OTHER_CODE_SIGN_FLAGS:-} --preserve-metadata=identifier,entitlements '$1'"

    if [ "${COCOAPODS_PARALLEL_CODE_SIGN}" == "true" ]; then
      code_sign_cmd="$code_sign_cmd &"
    fi
    echo "$code_sign_cmd"
    eval "$code_sign_cmd"
  fi
}

# Strip invalid architectures
strip_invalid_archs() {
  binary="$1"
  # Get architectures for current target binary
  binary_archs="$(lipo -info "$binary" | rev | cut -d ':' -f1 | awk '{$1=$1;print}' | rev)"
  # Intersect them with the architectures we are building for
  intersected_archs="$(echo ${ARCHS[@]} ${binary_archs[@]} | tr ' ' '\n' | sort | uniq -d)"
  # If there are no archs supported by this binary then warn the user
  if [[ -z "$intersected_archs" ]]; then
    echo "warning: [CP] Vendored binary '$binary' contains architectures ($binary_archs) none of which match the current build architectures ($ARCHS)."
    STRIP_BINARY_RETVAL=0
    return
  fi
  stripped=""
  for arch in $binary_archs; do
    if ! [[ "${ARCHS}" == *"$arch"* ]]; then
      # Strip non-valid architectures in-place
      lipo -remove "$arch" -output "$binary" "$binary"
      stripped="$stripped $arch"
    fi
  done
  if [[ "$stripped" ]]; then
    echo "Stripped $binary of architectures:$stripped"
  fi
  STRIP_BINARY_RETVAL=1
}


if [[ "$CONFIGURATION" == "Debug" ]]; then
  install_framework "${BUILT_PRODUCTS_DIR}/Realm/Realm.framework"
  install_framework "${BUILT_PRODUCTS_DIR}/RealmSwift/RealmSwift.framework"
fi
if [[ "$CONFIGURATION" == "Release" ]]; then
  install_framework "${BUILT_PRODUCTS_DIR}/Realm/Realm.framework"
  install_framework "${BUILT_PRODUCTS_DIR}/RealmSwift/RealmSwift.framework"
fi
if [ "${COCOAPODS_PARALLEL_CODE_SIGN}" == "true" ]; then
  wait
fi
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
9C17BDC2228CAE9600F020B1 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		9C17BDC4228CAE9600F020B1 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 221BA24401C8851B945E6AA5 /* Pods-restaurant.debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 5M4D3HTW69;
				INFOPLIST_FILE = restaurant/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = ir.swifter.foodapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 4.2;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		9C17BDC5228CAE9600F020B1 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = DDE88E910094FBB52752E5DF /* Pods-restaurant.release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 5M4D3HTW69;
				INFOPLIST_FILE = restaurant/Info.plist;
				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				PRODUCT_BUNDLE_IDENTIFIER = ir.swifter.foodapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 4.2;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		9C17BDAC228CAE9400F020B1 /* Build configuration list for PBXProject "restaurant" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				9C17BDC1228CAE9600F020B1 /* Debug */,
				9C17BDC2228CAE9600F020B1 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		9C17BDC3228CAE9600F020B1 /* Build configuration list for PBXNativeTarget "restaurant" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				9C17BDC4228CAE9600F020B1 /* Debug */,
				9C17BDC5228CAE9600F020B1 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 9C17BDA9228CAE9400F020B1 /* Project object */;
}
//
//  MenuDetailViewController.swift
//  Food menu app
//

import UIKit

class MenuDetailViewController: UIViewController {
    var item: MenuItem?

    @IBOutlet weak var menuImageView: UIImageView!
    @IBOutlet weak var menuNameLabel: UILabel!
    @IBOutlet weak var menuPriceLabel: UILabel!
    @IBOutlet weak var menuDescriptionLabel: UILabel!
    @IBOutlet weak var addOrderButton: UIButton!
    override func viewDidLoad() {
        super.viewDidLoad()

        self.menuImageView.layer.cornerRadius = 7
        self.menuImageView.clipsToBounds = true
        
        self.addOrderButton.layer.cornerRadius = 7
        self.addOrderButton.clipsToBounds = true
        
        self.setBarButtons()
        
        self.title = item?.name
        updateUI()
        // Do any additional setup after loading the view.
    }
    
    override func encodeRestorableState(with coder: NSCoder) {
        super.encodeRestorableState(with: coder)
        
        guard let item = self.item else {
            return
        }
        coder.encode(item.id, forKey: "menuItemId")
    }
    
    override func decodeRestorableState(with coder: NSCoder) {
        super.decodeRestorableState(with: coder)
        
        let itemId = coder.decodeInteger(forKey: "menuItemId")
        
        self.item = MenuService.shared.getMenuItemById(id: itemId)
        self.updateUI()
    }
    
    func updateUI() {
        guard let item = self.item else {
            NotificationCenter.default.post(name: AlertService.infoAlertNotification, object: nil, userInfo: ["title": Messages.menuItemNotFoundErrorTitle, "message": Messages.menuItemNotFoundErrorMessage])
            return
        }
        self.menuNameLabel.text = item.name
        self.menuPriceLabel.text = "$ \(item.price)"
        self.menuDescriptionLabel.text = item.detailText
        
        let imageURL = URL(string: item.imageURL)!
        MenuService.shared.fetchImage(for: imageURL) {
            (image) in
            guard let image = image else {return}
            DispatchQueue.main.async {
                self.menuImageView.image = image
            }
        }
    }
    
    @IBAction func addOrderButtonTapped(_ sender: UIButton) {
        guard let item = self.item else {
            NotificationCenter.default.post(name: AlertService.infoAlertNotification, object: nil, userInfo: ["title": Messages.menuItemNotFoundErrorTitle, "message": Messages.menuItemNotFoundErrorMessage])
            return
        }
        
        UIView.animate(withDuration: 0.3) {
            self.addOrderButton.transform = CGAffineTransform(scaleX: 1.5, y: 1.5)
            self.addOrderButton.transform = CGAffineTransform(scaleX: 1.0, y: 1.0)
        }
        
        MenuService.shared.addToOrder(menuItem: item)
    }
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destination.
        // Pass the selected object to the new view controller.
    }
    */
    
    func setBarButtons() {
        self.setLeftBarButton()
    }
    
    func setLeftBarButton() {
        let backButton = UIButton(type: .system)
        backButton.titleLabel?.font = UIFont(name: "Font Awesome 5 Free", size: 18.0)!
        backButton.setTitle("\u{f30a}", for: .normal)
        backButton.frame = CGRect(x: 0, y: 0, width: 32, height: 32)
        backButton.contentEdgeInsets = UIEdgeInsets(top: 0, left: -10.0, bottom: 0, right: 0)
        backButton.addTarget(self, action: #selector(self.backButtonTapped(_:)), for: .touchUpInside)
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(customView: backButton)
    }
    
    @IBAction func backButtonTapped(_ sender: UIBarButtonItem) {
        self.navigationController?.popViewController(animated: true)
    }

}

//
//  MenuTableViewController.swift
//  restaurant
//
//  Created by love on 5/16/19.
//  Copyright © 2019 love. All rights reserved.
//
import UIKit

class MenuTableViewController: UITableViewController {
    var category: String?
    var menuItems = [MenuItem]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationItem.title = self.category?.capitalized
        tableView.register(UINib(nibName: "MenuItemTableViewCell", bundle: nil), forCellReuseIdentifier: "MenuItemTableViewCell")
        
        self.setBarButtons()
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.updateUI), name: MenuService.menuItemsUpdatedNotification, object: nil)
        
        self.updateUI()
        
    }
    
    @objc func updateUI() {
        guard let category = category else {
            NotificationCenter.default.post(name: AlertService.infoAlertNotification, object: nil, userInfo: ["title": Messages.categoryIsRequiredErrorTitle, "message": Messages.categoryIsRequiredErrorMessage])
            return
        }
        self.menuItems = MenuService.shared.getMenuItemsByCategory(category: category)
        
        self.tableView.reloadData()
    }

    // MARK: - Table view data source
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return self.menuItems.count
    }

    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "MenuItemTableViewCell", for:
            indexPath) as! MenuItemTableViewCell

        let item = self.menuItems[indexPath.row]
        cell.itemTitleLabel?.text = item.name
        cell.itemPriceLabel?.text = String(format: "$%.2f", item.price)
        cell.itemImageView.layer.cornerRadius = 7
        
        let imageURL = URL(string: item.imageURL)!
        MenuService.shared.fetchImage(for: imageURL) {
            (image) in
            guard let image = image else {return}
            
            DispatchQueue.main.async {
                if let currentIndexPath = self.tableView.indexPath(for: cell), currentIndexPath != indexPath {
                    return
                }
                
                cell.itemImageView?.image = image
                cell.setNeedsLayout()
            }
        }

        return cell
    }
 

    /*
    // Override to support conditional editing of the table view.
    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        // Return false if you do not want the specified item to be editable.
        return true
    }
    */

    /*
    // Override to support editing the table view.
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            // Delete the row from the data source
            tableView.deleteRows(at: [indexPath], with: .fade)
        } else if editingStyle == .insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
        }    
    }
    */

    /*
    // Override to support rearranging the table view.
    override func tableView(_ tableView: UITableView, moveRowAt fromIndexPath: IndexPath, to: IndexPath) {
    }
    */

    /*
    // Override to support conditional rearranging of the table view.
    override func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
        // Return false if you do not want the item to be re-orderable.
        return true
    }
    */

    
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "MenuSegueIdentifier" {
            let menuDetailViewController = segue.destination as! MenuDetailViewController
            let index = tableView.indexPathForSelectedRow!.row
            menuDetailViewController.item = self.menuItems[index]
        }
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    override func encodeRestorableState(with coder: NSCoder) {
        super.encodeRestorableState(with: coder)
        
        guard let category = category else {
            return
        }
        coder.encode(category, forKey: "category")
    }
    
    override func decodeRestorableState(with coder: NSCoder) {
        super.decodeRestorableState(with: coder)
        
        self.category = (coder.decodeObject(forKey: "category") as! String)
        self.updateUI()
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        performSegue(withIdentifier: "MenuSegueIdentifier", sender: nil)
    }
    
    func setBarButtons() {
        self.setLeftBarButton()
    }
    
    func setLeftBarButton() {
        let backButton = UIButton(type: .system)
        backButton.titleLabel?.font = UIFont(name: "Font Awesome 5 Free", size: 18.0)!
        backButton.setTitle("\u{f30a}", for: .normal)
        backButton.frame = CGRect(x: 0, y: 0, width: 32, height: 32)
        backButton.contentEdgeInsets = UIEdgeInsets(top: 0, left: -10.0, bottom: 0, right: 0)
        backButton.addTarget(self, action: #selector(self.backButtonTapped(_:)), for: .touchUpInside)
       
        navigationItem.leftBarButtonItem = UIBarButtonItem(customView: backButton)
    }
    
    @IBAction func backButtonTapped(_ sender: UIBarButtonItem) {
        self.navigationController?.popViewController(animated: true)
    }
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BuildMachineOSBuild</key>
	<string>18A389</string>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>Open Restaurant</string>
	<key>CFBundleIdentifier</key>
	<string>com.apple.RestaurantServerUI</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>Open Restaurant</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSupportedPlatforms</key>
	<array>
		<string>MacOSX</string>
	</array>
	<key>CFBundleVersion</key>
	<string>1</string>
	<key>DTCompiler</key>
	<string>com.apple.compilers.llvm.clang.1_0</string>
	<key>DTPlatformBuild</key>
	<string>10A255</string>
	<key>DTPlatformVersion</key>
	<string>GM</string>
	<key>DTSDKBuild</key>
	<string>18A384</string>
	<key>DTSDKName</key>
	<string>macosx10.14</string>
	<key>DTXcode</key>
	<string>1000</string>
	<key>DTXcodeBuild</key>
	<string>10A255</string>
	<key>LSMinimumSystemVersion</key>
	<string>10.13</string>
	<key>NSHumanReadableCopyright</key>
	<string>Copyright © 2018 Apple. All rights reserved.</string>
	<key>NSMainStoryboardFile</key>
	<string>Main</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>
platform :ios, '12.0'
use_frameworks!

target 'restaurant' do
    pod 'RealmSwift'
end

}
<component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/lib" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/test" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/.dart_tool" />
      <excludeFolder url="file://$MODULE_DIR$/.idea" />
      <excludeFolder url="file://$MODULE_DIR$/.pub" />
      <excludeFolder url="file://$MODULE_DIR$/build" />
    </content>
"Generated.xcconfig"
apply Theme: "img": "https://dribbble.com/shots/14218141-Food-App-Concept/attachments/5858715?mode=media",

     apply plugin:
      "id": "the-gramercy-tavern-burger-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137148/Gramercy-Tavern-Burger-and-Kielbasa-Kit-6.4.21-72ppi-1x1-15.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gramercy Tavern",
      "dsc": "The Gramercy Tavern Burger - 4 Pack",
      "price": 99,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "shake-shack-shackburger-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/134862/shake-shack-shackburger-8-pack.973a5e26836ea86d7e86a327becea2b0.png?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Shake Shack",
      "dsc": "Shake Shack ShackBurger® – 8 Pack",
      "price": 49,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "gotts-cheeseburger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132933/gotts-complete-cheeseburger-kit-for-4.7bdc74104b193427b3fe6eae39e05b5e.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gott's Roadside",
      "dsc": "Gott's Complete Cheeseburger Kit for 4",
      "price": 99,
      "rate": 5,
      "country": "St. Helena, CA"
    },
    {
      "id": "le-big-matt-kit-for-6",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/131436/le-big-matt-kit-for-6.1ddae6e382bb3218eeb0fd5247de115a.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Emmy Squared",
      "dsc": "Le Big Matt Burger Kit for 6",
      "price": 99,
      "rate": 5,
      "country": "Brooklyn, NY"
    },
    {
      "id": "shake-shack-shackburger-16-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/134022/shake-shack-shackburger-16-pack.316f8b09144db65931ea29e34869287a.png?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Shake Shack",
      "dsc": "Shake Shack Shackburger® – 16 Pack",
      "price": 89,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "wagyu-burger-patties-12-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/107019/wagyu-burger-patties-12-pack.6116f4cd648dee20651f99e21e7d758b.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Westholme Wagyu",
      "dsc": "Wagyu Burger Patties - 12 Pack",
      "price": 129,
      "rate": 5,
      "country": "Queensland, Australia"
    },
    {
      "id": "21-usda-prime-burgers-pack-of-18-8oz-each",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133009/usda-prime-burgers-pack-of-18-8oz-each.274c67f15aa1c0b210dbf51801706670.png?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Peter Luger Steak House",
      "dsc": "USDA Prime Burgers - Pack of 18 (8oz each)",
      "price": 175.95,
      "rate": 4,
      "country": "Brooklyn, NY"
    },
    {
      "id": "burger-bomb-kit-for-6",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133829/burger-bomb-kit-for-6.b0430200cfc153c1c15c7997236a6152.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Old Homestead Steakhouse",
      "dsc": "Burger Bomb Kit for 6",
      "price": 129,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "double-stack-burger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/122768/handf-double-stack-burger-kit-for-4.4ee9f54b1d6087e9996335f07c13e5cd.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Holeman & Finch",
      "dsc": "Double Stack Burger Kit for 4",
      "price": 79,
      "rate": 4,
      "country": "Atlanta, GA"
    },
    {
      "id": "goldbelly-burger-bash-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/66179/the-burger-bash-package.bd9d12d031865940bbe5faf15f1a62f8.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Goldbelly \"Burger Bash\" Pack",
      "price": 109,
      "rate": 5,
      "country": "North Bergen, NJ"
    },
    {
      "id": "burger-au-poivre-kit-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/103477/burger-au-poivre-kit-4-pack.3ca0e39b02db753304cd185638dad518.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Raoul's",
      "dsc": "Burger Au Poivre Kit - 4 Pack",
      "price": 99,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "goldbelly-burger-blend-4-lbs",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/96214/goldbelly-burger-blend-1-lb.13a21b66edf7173a59c75c3a6d2f981b.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Flannery Beef",
      "dsc": "Goldbelly Burger Blend - 4 lbs.",
      "price": 79,
      "rate": 5,
      "country": "San Rafael, CA"
    },
    {
      "id": "gotts-complete-cheeseburger-kit-for-8",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133967/gotts-complete-cheeseburger-kit-for-8.092aa049d00286fa1733d720decc782e.jpeg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gott's Roadside",
      "dsc": "Gott's Complete Cheeseburger Kit for 8",
      "price": 149,
      "rate": 4,
      "country": "St. Helena, CA"
    },
    {
      "id": "gramercy-tavern-burger-kielbasa-combo",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/135126/Gramercy-Tavern-Burger-and-Kielbasa-Kit-6.4.21-72ppi-1x1-47.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gramercy Tavern",
      "dsc": "Gramercy Tavern Burger + Kielbasa Combo",
      "price": 149,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "classic-juicy-lucy-burgers-sweet-potato-puffs-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/114296/classic-juicy-lucy-burgers-sweet-potato-puffs-4-pack.b726cfe63b6e1584a4e3c01db24f97d2.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "5-8 Club",
      "dsc": "Classic Juicy Lucy Burgers + Sweet Potato Puffs - 4 Pack",
      "price": 99,
      "rate": 5,
      "country": "Minneapolis, MN"
    },
    {
      "id": "juicy-lucy-burger-kit-5-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132203/juicy-lucy-burger-kit-5-pack.2902a0c8549449529e87f902f425f9ae.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Whitmans",
      "dsc": "Juicy Lucy Burger Kit - 5 Pack",
      "price": 79,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "blue-aged-cheddar-jalapeno-burgers-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/124204/blue-aged-cheddar-jalapeno-burgers-6-pack.a8e79d575c4a6883a0a4daed6a18b635.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Old Homestead Steakhouse",
      "dsc": "Blue Aged Cheddar Jalapeno Burgers - 6 Pack",
      "price": 139,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "wagyu-burger-patties-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/106998/wagyu-burger-patties-6-pack.7837b88faa095c92a0a1a00414296beb.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Westholme Wagyu",
      "dsc": "Wagyu Burger Patties - 6 Pack",
      "price": 89,
      "rate": 5,
      "country": "Queensland, Australia"
    },
    {
      "id": "american-wagyu-burger-party-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/109633/american-wagyu-burger-party-pack.6bb259a1c95c067d5da9a1057a9517e7.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Holy Grail Steak Co.",
      "dsc": "American Wagyu Burger Party Pack",
      "price": 199,
      "rate": 5,
      "country": "San Francisco, CA"
    },
    {
      "id": "best-damn-cheeseburger-kit",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/134005/best-damn-cheeseburger-kit-8-pack.0c2ca295cc1b754d2867651184a07140.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "4505 Burgers & BBQ",
      "dsc": "Best Damn Cheeseburger Kit - 8 Pack",
      "price": 89,
      "rate": 5,
      "country": "San Francisco, CA"
    },
    {
      "id": "foie-gras-teriyaki-burger-kit-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137097/Hall-by-Odo-Foie-Gras-Burger-1.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "HALL by Odo",
      "dsc": "Foie Gras Teriyaki Burger Kit - 8 Pack",
      "price": 139,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "juicy-lucifer-burger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/120623/juicy-lucifer-burger-kit-for-4.5a231c2ed989431218aa6062ff89b20a.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Hell's Kitchen",
      "dsc": "Juicy Lucifer Burger Kit for 4",
      "price": 79,
      "rate": 4,
      "country": "Minneapolis, MN"
    },
    {
      "id": "le-pig-mac-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/106701/le-pig-mac-kit-for-4.d9b274673ffc1a1a2035c9573291cae2.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Cochon Butcher",
      "dsc": "Le Pig Mac Kit for 4",
      "price": 109,
      "rate": 4,
      "country": "New Orleans, LA"
    },
    {
      "id": "juicy-lucy-burgers-sweet-potato-puffs-choose-your-own-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132910/juicy-lucy-burgers-sweet-potato-puffs-choose-your-own-4-pack.c2994c945ac66b003c7763c4b3fd5255.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "5-8 Club",
      "dsc": "Juicy Lucy Burgers + Sweet Potato Puffs - Choose Your Own 4 Pack",
      "price": 99,
      "rate": 5,
      "country": "Minneapolis, MN"
    },
    {
      "id": "the-cheeseburger-wellington-2-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132490/the-burger-wellington-2-pack.eb53bc9ad74634bb0c5da44bc55f9362.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Wellingtons LA",
      "dsc": "\"The Cheeseburger\" Wellington - 2 Pack",
      "price": 59,
      "rate": 4,
      "country": "Los Angeles, CA"
    },
    {
      "id": "dry-aged-blend-burgers",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/103715/dry-aged-blend-burgers.90e05b1839eff99eb724e7d6265e84f9.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Master Purveyors",
      "dsc": "Dry-Aged Blend Burgers",
      "price": 54,
      "rate": 5,
      "country": "Bronx, NY"
    },
    {
      "id": "double-stack-burger-kit-for-2",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132733/handf-double-stack-burger-kit-for-2.4ecf6b1bee6b0ecef3b82606860a1b5b.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Holeman & Finch",
      "dsc": "Double Stack Burger Kit for 2",
      "price": 49,
      "rate": 4,
      "country": "Atlanta, GA"
    },
    {
      "id": "the-gold-label-burger-4-patties-6oz-each-15-lbs",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/130074/the-gold-label-burger-4-patties-6oz-each-15-lbs.492945fff05ba5f036eca31df024d22f.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Gold Label Burger",
      "price": 69,
      "rate": 5,
      "country": "North Bergen, NJ"
    },
    {
      "id": "legendary-cheesy-western-burger-kit-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/131302/legendary-cheesy-western-burger-kit-4-pack.393ceddb3bca3acd862e762e48e4c207.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Texas Inn",
      "dsc": "Legendary \"Cheesy Western\" Burger Kit - 4 Pack",
      "price": 59,
      "rate": 4,
      "country": "Lynchburg, VA"
    },
    {
      "id": "foie-gras-teriyaki-wagyu-burger-kit-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137099/Hall-by-Odo-Burger-Combo.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "HALL by Odo",
      "dsc": "Foie Gras Teriyaki + Wagyu Burger Kit - 8 Pack",
      "price": 119,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "keens-burger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/105255/keens-burger-kit-for-4.862e70d1671202747d23f732f3453c81.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Keens Steakhouse",
      "dsc": "Keens Burger Kit for 4",
      "price": 99,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "16001-100-fullblood-wagyu-beef-ground-beef",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/134623/100-fullblood-wagyu-beef-ground-beef.3ce763ed33cc05cddecc1978cb197a7e.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Lone Mountain Wagyu",
      "dsc": "100% Fullblood Wagyu Beef Ground Beef",
      "price": 69,
      "rate": 5,
      "country": "Golden, NM"
    },
    {
      "id": "the-cheeseburger-wellington-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/131557/the-burger-wellington-4-pack.aca42e69c68050d853d94eb5d4076dac.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Wellingtons LA",
      "dsc": "\"The Cheeseburger\" Wellington - 4 Pack",
      "price": 89,
      "rate": 5,
      "country": "Los Angeles, CA"
    },
    {
      "id": "17663-mesquite-smoked-brisket-burger-patties-sauce",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/131538/mesquite-smoked-brisket-burger-patties-dry-rub.628f7434c98a870a57b36c0c1dc4ec3f.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Davila's BBQ",
      "dsc": "Mesquite Smoked Brisket Burger Patties + Dry Rub",
      "price": 89,
      "rate": 5,
      "country": "Seguin, TX"
    },
    {
      "id": "gotts-impossible-burger-kit-for-8",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/129127/gott-s-impossible-burger-kit-for-8.83516ceaacc8918f0ccad6575a6b8425.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gott's Roadside",
      "dsc": "Gott’s Impossible™ Burger Kit for 8",
      "price": 169,
      "rate": 4,
      "country": "St. Helena, CA"
    },
    {
      "id": "goldbelly-steak-burger-sampler",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133612/goldbelly-steak-burger-sampler.30f9703bf7c2355cffa8846e328481d0.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Goldbelly Steak + Burger Sampler",
      "price": 135,
      "rate": 5,
      "country": "North Bergen, NJ"
    },
    {
      "id": "hall-signature-wagyu-burger-kit-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137095/Hall-by-Odo-Signature-Burger-1.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "HALL by Odo",
      "dsc": "HALL Signature Wagyu Burger Kit - 8 Pack",
      "price": 99,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "gourmet-burger-box-12-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/97480/gourmet-burger-box-12-pack.a35a99e7afd03e8d1f5d3bf2eb33c46a.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Alewel's Country Meats",
      "dsc": "Gourmet Burger Box - 12 Pack",
      "price": 89,
      "rate": 5,
      "country": "Warrensburg, MO"
    },
    {
      "id": "foie-gras-teriyaki-burger-kit-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137098/Hall-by-Odo-Foie-Gras-Burger-1.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "HALL by Odo",
      "dsc": "Foie Gras Teriyaki Burger Kit - 4 Pack",
      "price": 89,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "hall-signature-wagyu-burger-kit-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/137096/Hall-by-Odo-Signature-Burger-1.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "HALL by Odo",
      "dsc": "HALL Signature Wagyu Burger Kit - 4 Pack",
      "price": 69,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "burger-patty-assortment-12-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/108388/burger-patty-assortment-12-pack.1a508c39aa7b49a00c1c4349f88670a4.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Rocker Bros. Meat & Provisions",
      "dsc": "Burger Patty Assortment - 12 Pack",
      "price": 39,
      "rate": 5,
      "country": "Los Angeles, CA"
    },
    {
      "id": "gotts-roadside-impossible-burger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/135117/IB_Burgers_2.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "The Impossible Foods Shop",
      "dsc": "Gott’s Roadside Impossible™ Burger Kit for 4",
      "price": 109,
      "rate": 4,
      "country": "Oakland, CA"
    },
    {
      "id": "short-rib-blend-burgers",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/103717/short-rib-blend-burgers.a078c983a9ba2b3628a944a0c885ae14.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Master Purveyors",
      "dsc": "Short Rib Blend Burgers",
      "price": 52,
      "rate": 5,
      "country": "Bronx, NY"
    },
    {
      "id": "classic-shrimp-burgers",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/112675/classic-shrimp-burgers.965772a8abe95e6e5579e86312d74de6.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Big Shake's Hot Chicken",
      "dsc": "Classic Shrimp Burgers",
      "price": 79,
      "rate": 4,
      "country": "Franklin, TN"
    },
    {
      "id": "moobys-meal-kit-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/134095/moobys-meal-kit-6-pack.d0e1a6e3dd32eb2673b5df60c3db1818.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Mooby's",
      "dsc": "Mooby's Meal Kit - 6 Pack",
      "price": 79,
      "rate": 5,
      "country": "Los Angeles, CA"
    },
    {
      "id": "juicy-lucy-burgers-sweet-potato-puffs-choose-your-own-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132978/juicy-lucy-burgers-sweet-potato-puffs-choose-your-own-8-pack.54ad2dc40fb4708ec1b6e5c3ccdf2f89.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "5-8 Club",
      "dsc": "Juicy Lucy Burgers + Sweet Potato Puffs - Choose Your Own 8 Pack",
      "price": 149,
      "rate": 5,
      "country": "Minneapolis, MN"
    },
    {
      "id": "mesquite-smoked-brisket-burger-patties-hot-links-dry-rub",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/79492/mesquite-smoked-brisket-burger-patties-hot-links-dry-rub.41cbe9a5d29f1a4ef3491ab6eb8713a5.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Davila's BBQ",
      "dsc": "Mesquite Smoked Brisket Burger Patties + Hot Links + Dry Rub",
      "price": 109,
      "rate": 4,
      "country": "Seguin, TX"
    },
    {
      "id": "hatch-green-chile-cheeseburger-kit-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/product_image/image/25753/green-chile-cheeseburger-6-pack.f3b980b43c8661e8fac3634b082668a5.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Sparky's Hatch Green Chile Burgers",
      "dsc": "Hatch Green Chile Cheeseburger Kit - 6 Pack",
      "price": 109,
      "rate": 5,
      "country": "Hatch, NM"
    },
    {
      "id": "Giant-cheese-burger-potstickers-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/97098/giant-cheese-burger-potstickers-6-pack.36899150ea75b8869bc2bd46ad126a57.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Shirley Chung's Ms. Chi",
      "dsc": "Giant Cheese Burger Potstickers - 6 Pack",
      "price": 69,
      "rate": 4,
      "country": "Los Angeles, CA"
    },
    {
      "id": "juicy-lucy-burger-kit-10-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/105731/juicy-lucy-burger-kit-10-pack.41d77903b061d6c6b080f990b4ad2fb7.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Whitmans",
      "dsc": "Juicy Lucy Burger Kit - 10 Pack",
      "price": 129,
      "rate": 5,
      "country": "New York, NY"
    },
    {
      "id": "vegan-burger-grill-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/105946/vegan-burger-grill-kit-for-4.1450ccef8c44f7394c93f58450ce67b9.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Lekka Burger",
      "dsc": "Vegan Burger Grill Kit for 4",
      "price": 79,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "classic-juicy-lucy-burgers-sweet-potato-puffs-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/114319/classic-juicy-lucy-burgers-sweet-potato-puffs-8-pack.36c8d716563c1af2d2ca1c1140d36273.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "5-8 Club",
      "dsc": "Classic Juicy Lucy Burgers + Sweet Potato Puffs - 8 Pack",
      "price": 149,
      "rate": 5,
      "country": "Minneapolis, MN"
    },
    {
      "id": "brisket-burger-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/124922/short-rib-burger-blend.6275c3ffad67f0e93de4eafbc4f809df.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Brisket Burger - 8 Pack",
      "price": 31.9,
      "rate": 5,
      "country": "North Bergen, NJ"
    },
    {
      "id": "bfbol-original-blend-burger-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/124841/original-blend-burger.50bb5cf520d3f653b0b80187716cc3e2.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Original Blend Burger - 8 Pack",
      "price": 31.9,
      "rate": 5,
      "country": "North Bergen, NJ"
    },
    {
      "id": "ribeye-burger-patties-6-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133972/ribeye-burger-patties-6-pack.dd62bc3b8a096f15429571865ba5d561.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Rocker Bros. Meat & Provisions",
      "dsc": "Ribeye Burger Patties - 6 Pack",
      "price": 45,
      "rate": 4,
      "country": "Los Angeles, CA"
    },
    {
      "id": "raouls-steak-and-burgers-au-poivre-kit-2-4-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133421/raouls-burgers-and-steaks-au-poivre-kit.aeafc64d55d6ad7274cb8ba1b562f8eb.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Raoul's",
      "dsc": "Raoul's Burgers and Steaks Au Poivre Kit",
      "price": 249,
      "rate": 4,
      "country": "New York, NY"
    },
    {
      "id": "bfbsr-short-rib-burger-8-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/132398/short-rib-burger-blend.586f10c35edd4d7c6e9cfa41e3b2d0d2.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Pat LaFrieda Meats",
      "dsc": "Short Rib Burger - 8 Pack",
      "price": 36,
      "rate": 4,
      "country": "North Bergen, NJ"
    },
    {
      "id": "gotts-impossible-burger-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/133852/gott-s-impossible-burger-kit-for-4.1170c94bac2ddef7de0c52cd7df6e0a3.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Gott's Roadside",
      "dsc": "Gott’s Impossible™ Burger Kit for 4",
      "price": 109,
      "rate": 5,
      "country": "St. Helena, CA"
    },
    {
      "id": "famous-french-bread-burger-fries-kit-for-4",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/129511/burger-fries-kit-for-4.ffc10e462cadece50d64f8ce5fd8ea7a.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Rotier's Restaurant",
      "dsc": "Famous French Bread Burger + Fries Kit for 4",
      "price": 99,
      "rate": 4,
      "country": "Nashville, TN"
    },
    {
      "id": "vegan-burger-patties-12-pack",
      "img": "https://goldbelly.imgix.net/uploads/showcase_media_asset/image/119472/vegan-burger-patties-12-pack.56f31f18b126e7f84b02b6f1babd5d12.jpg?ixlib=react-9.0.2&auto=format&ar=1%3A1",
      "name": "Burgerlords",
      "dsc": "Vegan Burger Patties - 12 Pack",
      "price": 79,
      "rate": 4,
      "country": "Los Angeles, CA"
    },
    {
      "id": "GRRstCs"
    }
  ]
  enum AuthMode{
    SignIn,
    SignUp,
  }

void main() async{
  WidgetsFlutterBinding.ensureInitialized();
  await PreferenceHelper.load();
  await Firebase.initializeApp();
  runApp(App());
}lass MainScreen extends StatefulWidget {
  final MainModel model;
  MainScreen({this.model});
  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int currentTabIndex = 0;

  List<Widget> pages;
  Widget currentPage;

  //Pages
  HomePage homePage;
  OrderPage orderPage;
  FavoritePage favoritePage;
  ProfilePage profilePage;

  @override
  void initState() {
    widget.model.fetchAll();

    homePage = HomePage();
    orderPage = OrderPage(model: widget.model);
    favoritePage = FavoritePage(model: widget.model);
    profilePage = ProfilePage();
    pages = [homePage, favoritePage, orderPage, profilePage];

    currentPage = homePage;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          title: Text(
            currentTabIndex == 0
                ? "FOOD MENU"
                : currentTabIndex == 1
                    ? "All Food Items"
                    : currentTabIndex == 2 ? "Your Order" : "Profile",
            style: TextStyle(
                color: Colors.black,
                fontSize: 16.0,
                fontWeight: FontWeight.bold),
          ),
          centerTitle: true,
          backgroundColor: Colors.white,
          elevation: 0,
          iconTheme: IconThemeData(color: Colors.black),
          actions: <Widget>[
            IconButton(
              icon: Icon(
                Icons.notifications_none,
                size: 30.0,
                color: Colors.lightBlueAccent,
              ),
              onPressed: () {},
            )
          ],
        ),
        drawer: ScopedModelDescendant(
            builder: (BuildContext context, Widget child, MainModel model) {
          UserInfo userInfo = model.getUserDetails(PreferenceHelper.getId());
          return Drawer(
            child: Column(
              children: <Widget>[
                SizedBox(
                  height: 20,
                ),
                Column(
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(30.0),
                      child: Image.asset('put prefred image'),
                    ),
                    SizedBox(
                      height: 10,
                    ),
                    Text(
                      Food Menu",
                      style:
                          TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                    ),
                  ],
                ),
                SizedBox(
                  height: 20,
                ),
                userInfo.email == "admin@ntisa.com"
                    ? ListTile(
                        onTap: () {
                          Navigator.of(context).pop();
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (BuildContext context) => AddFoodItem(),
                          ));
                        },
                        leading: Icon(Icons.fastfood),
                        title: Text(
                          "Add Food Item",
                          style: TextStyle(fontSize: 16.0),
                        ),
                      )
                    : ListTile(
                        onTap: () {
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (BuildContext context) => AboutUsPage(),
                          ));
                        },
                        leading: Icon(Icons.info),
                        title: Text(
                          "About Us",
                          style: TextStyle(fontSize: 16.0),
                        ),
                      ),
                SizedBox(
                  height: 20,
                ),
              ],
            ),
          );
        }),
        bottomNavigationBar: BottomNavigationBar(
          onTap: (int index) {
            setState(() {
              currentTabIndex = index;
              currentPage = pages[index];
            });
          },
          currentIndex: currentTabIndex,
          type: BottomNavigationBarType.fixed,
          items: <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(Icons.home),
              title: Text("Home"),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.restaurant),
              title: Text("Explore"),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.shopping_cart),
              title: Text("Cart"),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person),
              title: Text("Profile"),
            ),
          ],
        ),
        body: currentPage,
      ),
    );
  }
}
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97C146EB1CF9000F007C117D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		9740EEB11CF90186004384FC /* Flutter */ = {
			isa = PBXGroup;
			children = (
				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				9740EEB31CF90195004384FC /* Generated.xcconfig */,
			);
			name = Flutter;
			sourceTree = "<group>";
		};
		97C146E51CF9000F007C117D = {
			isa = PBXGroup;
			children = (
				9740EEB11CF90186004384FC /* Flutter */,
				97C146F01CF9000F007C117D /* Runner */,
				97C146EF1CF9000F007C117D /* Products */,
			);
			sourceTree = "<group>";
		};
		97C146EF1CF9000F007C117D /* Products */ = {
			isa = PBXGroup;
			children = (
				97C146EE1CF9000F007C117D /* Runner.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97C146F01CF9000F007C117D /* Runner */ = {
			isa = PBXGroup;
			children = (
				97C146FA1CF9000F007C117D /* Main.storyboard */,
				97C146FD1CF9000F007C117D /* Assets.xcassets */,
				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
				97C147021CF9000F007C117D /* Info.plist */,
				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		97C146ED1CF9000F007C117D /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				9740EEB61CF901F6004384FC /* Run Script */,
				97C146EA1CF9000F007C117D /* Sources */,
				97C146EB1CF9000F007C117D /* Frameworks */,
				97C146EC1CF9000F007C117D /* Resources */,
				9705A1C41CF9048500538489 /* Embed Frameworks */,
				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Runner;
			productName = Runner;
			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97C146E61CF9000F007C117D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1020;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					97C146ED1CF9000F007C117D = {
						CreatedOnToolsVersion = 7.3.1;
						LastSwiftMigration = 1100;
					};
				};
			};
			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 97C146E51CF9000F007C117D;
			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97C146ED1CF9000F007C117D /* Runner */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		97C146EC1CF9000F007C117D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Thin Binary";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
		};
		9740EEB61CF901F6004384FC /* Run Script */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Run Script";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		97C146EA1CF9000F007C117D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C146FB1CF9000F007C117D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C147001CF9000F007C117D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		249021D3217E4FDB00AE95B9 /* Profile */ = {
			
		};
		97C147061CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		97C147071CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
				PRODUCT_BUNDLE_IDENTIFIER = com.example.foodapp;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147031CF9000F007C117D /* Debug */,
				97C147041CF9000F007C117D /* Release */,
				249021D3217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147061CF9000F007C117D /* Debug */,
				97C147071CF9000F007C117D /* Release */,
				249021D4217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97C146E61CF9000F007C117D /* Project object */;
}